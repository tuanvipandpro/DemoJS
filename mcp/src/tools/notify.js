import axios from 'axios';
import { logger } from '../utils/logger.js';

/**
 * Gửi thông báo qua Slack/GitHub
 * @param {object} params - Tham số đầu vào
 * @param {object} tokens - Tokens cho các services
 * @param {string} traceId - Trace ID
 * @returns {object} - Kết quả notification
 */
export const notifyTool = async (params, tokens, traceId) => {
  const startTime = Date.now();
  
  try {
    logger.info('Starting notify tool', {
      traceId,
      channel: params.channel,
      level: params.level,
      messageLength: params.message.length
    });

    let result;
    
    if (params.channel.startsWith('slack:')) {
      // Gửi thông báo qua Slack
      result = await sendSlackNotification(params, tokens.slackWebhook, traceId);
    } else if (params.channel.startsWith('github:')) {
      // Tạo GitHub Issue
      result = await createGitHubIssue(params, tokens.githubToken, traceId);
    } else {
      throw new Error(`Channel không được hỗ trợ: ${params.channel}`);
    }

    const duration = Date.now() - startTime;
    
    logger.info('notify tool completed successfully', {
      traceId,
      channel: params.channel,
      level: params.level,
      duration
    });

    return {
      ok: true,
      endpoint: params.channel.split(':')[0],
      messageId: result.messageId || result.issueId || 'unknown',
      timestamp: new Date().toISOString(),
      metadata: {
        channel: params.channel,
        level: params.level,
        durationMs: duration
      }
    };

  } catch (error) {
    const duration = Date.now() - startTime;
    
    logger.error('notify tool failed', {
      traceId,
      channel: params.channel,
      level: params.level,
      error: error.message,
      duration
    });

    throw new Error(`Lỗi khi gửi thông báo: ${error.message}`);
  }
};

/**
 * Gửi thông báo qua Slack
 * @param {object} params - Tham số notification
 * @param {string} webhookUrl - Slack webhook URL
 * @param {string} traceId - Trace ID
 * @returns {object} - Kết quả Slack notification
 */
const sendSlackNotification = async (params, webhookUrl, traceId) => {
  if (!webhookUrl) {
    throw new Error('Slack webhook URL không được cung cấp');
  }

  // Xác định màu sắc theo level
  const colors = {
    info: '#36a64f',    // Xanh lá
    warning: '#ff8c00', // Cam
    error: '#ff0000'    // Đỏ
  };

  const color = colors[params.level] || colors.info;

  // Tạo Slack message
  const slackMessage = {
    attachments: [
      {
        color: color,
        title: `InsightTestAI - ${params.level.toUpperCase()}`,
        text: params.message,
        fields: [
          {
            title: 'Level',
            value: params.level,
            short: true
          },
          {
            title: 'Timestamp',
            value: new Date().toLocaleString('vi-VN'),
            short: true
          },
          {
            title: 'Trace ID',
            value: traceId,
            short: true
          }
        ],
        footer: 'InsightTestAI MCP Server',
        ts: Math.floor(Date.now() / 1000)
      }
    ]
  };

  // Gửi request đến Slack
  const response = await axios.post(webhookUrl, slackMessage, {
    headers: {
      'Content-Type': 'application/json',
      'User-Agent': 'InsightTestAI-MCP-Server'
    },
    timeout: 10000
  });

  if (response.status !== 200) {
    throw new Error(`Slack API error: ${response.status}`);
  }

  // Parse response để lấy message ID
  let messageId = 'unknown';
  if (response.data && response.data.ts) {
    messageId = `ts-${response.data.ts}`;
  }

  return { messageId };
};

/**
 * Tạo GitHub Issue
 * @param {object} params - Tham số notification
 * @param {string} githubToken - GitHub token
 * @param {string} traceId - Trace ID
 * @returns {object} - Kết quả GitHub issue
 */
const createGitHubIssue = async (params, githubToken, traceId) => {
  if (!githubToken) {
    throw new Error('GitHub token không được cung cấp');
  }

  // Parse repository từ channel (format: github:org/repo)
  const repoMatch = params.channel.match(/github:([^\/]+\/[^\/]+)/);
  if (!repoMatch) {
    throw new Error('GitHub channel format không hợp lệ. Sử dụng: github:org/repo');
  }

  const repo = repoMatch[1];

  // Xác định labels theo level
  const labels = {
    info: ['insighttestai', 'info'],
    warning: ['insighttestai', 'warning'],
    error: ['insighttestai', 'error', 'bug']
  };

  const issueLabels = labels[params.level] || labels.info;

  // Tạo issue title và body
  const issueTitle = `[${params.level.toUpperCase()}] InsightTestAI Notification`;
  const issueBody = `
## InsightTestAI Notification

**Level:** ${params.level}
**Message:** ${params.message}
**Timestamp:** ${new Date().toLocaleString('vi-VN')}
**Trace ID:** ${traceId}

---

*Generated by InsightTestAI MCP Server*
`;

  // Tạo GitHub issue
  const response = await axios.post(
    `https://api.github.com/repos/${repo}/issues`,
    {
      title: issueTitle,
      body: issueBody,
      labels: issueLabels
    },
    {
      headers: {
        'Authorization': `token ${githubToken}`,
        'Accept': 'application/vnd.github.v3+json',
        'User-Agent': 'InsightTestAI-MCP-Server'
      },
      timeout: 15000
    }
  );

  if (response.status !== 201) {
    throw new Error(`GitHub API error: ${response.status} - ${response.data?.message || 'Unknown error'}`);
  }

  return { 
    issueId: response.data.number.toString(),
    issueUrl: response.data.html_url
  };
};

/**
 * Validate notification parameters
 * @param {object} params - Tham số cần validate
 * @returns {boolean} - Kết quả validation
 */
export const validateNotificationParams = (params) => {
  if (!params.channel || !params.message || !params.level) {
    return false;
  }

  if (!['info', 'warning', 'error'].includes(params.level)) {
    return false;
  }

  if (params.channel.startsWith('slack:') && !params.channel.includes('#')) {
    return false;
  }

  if (params.channel.startsWith('github:') && !params.channel.match(/github:[^\/]+\/[^\/]+/)) {
    return false;
  }

  return true;
};
